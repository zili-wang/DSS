# Confidential
# Copyright @2019 Zili Wang
# All rights reserved.
# 31154594 Vraagspecificatie simulatiemodel voorspelling wegdekschade
# Any change, update, or development of the file should be notified to wangzilihit@outlook.com

import sys
# The basic controls used in PyQt5 are all in the PyQt5.QtWidgets module
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import QtGui
from PyQt5.QtCore import QDate, QTime, QDateTime, Qt
# Import the login module generated by the designer tool
from Interface import Ui_SimulationTool
from typing import Any




class MyMainForm(QMainWindow, Ui_SimulationTool):
    def __init__(self, parent=None):
        super(MyMainForm, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.display)  # Define the functions when click "Run" button
        self.comboBox_2.activated.connect(self.performance)
        self.dateEdit.dateChanged.connect(self.time)
        self.comboBox.activated.connect(self.pavement)
        self.comboBox_3.activated.connect(self.performancemodel)
    def pavement(self):
        self.textBrowser.setText("Target road: "+self.comboBox.currentText() + "\nRoad performance: " + self.comboBox_2.currentText()+"\nPerformance model: "+self.comboBox_3.currentText())
    def performance(self):
        self.textBrowser.setText("Target road: "+self.comboBox.currentText() + "\nRoad performance: " + self.comboBox_2.currentText()+"\nPerformance model: "+self.comboBox_3.currentText())

    def performancemodel(self):
        self.textBrowser.setText("Target road: "+self.comboBox.currentText() + "\nRoad performance: " + self.comboBox_2.currentText()+"\nPerformance model: "+self.comboBox_3.currentText())

    def time(self):
        time_set = self.dateEdit.date()
        time_set_str = str(time_set.toString(Qt.ISODate))
        return time_set_str
    def display(self): #Outputing the simulation result when clicking "Run" Button

        PI = self.comboBox_2.currentText()
        date = self.time()

        # Call Run.py
        from Run import DTCfeature
        from Run import DTCtype
        from Run import DTCtrainsheet
        from Run import DTCtestsheet
        from Run import DTC


        features = DTCfeature(PI)
        types = DTCtype(PI)
        trainsheet_name = DTCtrainsheet(PI)
        test = DTCtestsheet(date)
        Num = DTC(features, types, trainsheet_name, test, date)
        a = str(Num)
        self.textBrowser.setText("Target road: "+self.comboBox.currentText() + "\nRoad performance: " + self.comboBox_2.currentText()+"\nPerformance model: "+self.comboBox_3.currentText()+"\n\nBy the chosen date "+self.time()+", the number of the pavement that is predicted to meet the maintenance requirement: "+a)



if __name__ == "__main__":
    # Fixed, PyQt5 programs all require QApplication objects. sys.argv is a list of command line arguments to ensure that the program can be run by double-clicking
    app = QApplication(sys.argv)
    # Initialization
    myWin = MyMainForm()
    # Display window controls on the screen
    myWin.show()
    # The program runs and the sys.exit method ensures that the program exits completely.
    sys.exit(app.exec_())